{% extends "__base.jinja" %}
{% block headscripts %}
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/wavesurfer.js/3.3.3/wavesurfer.min.js"></script> -->
    <script src="https://unpkg.com/wavesurfer.js@5.0.1/dist/wavesurfer.js"></script>
    <script src="https://unpkg.com/wavesurfer.js/dist/plugin/wavesurfer.regions.min.js"></script>
    <script src="https://unpkg.com/wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js"></script>
{% endblock %}
{% block body %}
    <div class='row mb-3 mt-n3'>
        <div class='col-12 mb-2'>
            <span>
                <span class='font-weight-bold'>
                    {% if is_secondary %}
                        2. stigs
                    {% endif %}
                    Greining Lotu: {{session.get_printable_id()}}
                </span>
                <span class='font-weight-bold btn-sm float-right rounded-pill bg-secondary text-success px-2 py-1'>
                    <span id='currentIndexSpan'></span>
                    /
                    <span id='totalIndexSpan'></span>
                </span>
                <span id='hasSentSpan' class='mr-2 float-right font-weight-bold btn-sm rounded-pill bg-secondary text-success px-3 py-1' >
                        Búið að greina
                </span>
            </span>
        </div>
        <div class='col-12'>
            <div class="progress">
                <div class="progress-bar bg-success" id='progressBar' role="progressbar"></div>
            </div>
        </div>
    </div>
    <div class='row'>
        <div class='col-12 controls mb-3 d-flex justify-content-{% if single %}around{% else%}between{% endif %}'>
            <button id='prev' class='btn btn-sm btn-secondary rounded-pill' type='button'>
                <i class='fa fa-arrow-left mr-1 ml-1'></i>
                <span class='font-weight-bold mr-1'>Fyrri</span>
            </button>
            <div>
                <button class='btn btn-secondary btn-sm rounded-pill' data-toggle='collapse', data-target='#infoCollapse'>
                    <span class='font-weight-bold mr-1 ml-1'>Hjálp</span>
                    <i class='fa fa-question-circle mr-1'></i>
                </button>
                <button id='restart' class='btn btn-secondary text-warning btn-sm rounded-pill'>
                    <span class='font-weight-bold mr-1 ml-1'>Endurræsa</span>
                    <i class='fa fa-redo mr-1'></i>
                </button>
            </div>
            <button id='next' class='btn btn-sm btn-secondary rounded-pill' type='button'>
                <span class='font-weight-bold ml-1 mr-1'>Næsti</span>
                <i class='fa fa-arrow-right mr-1'></i>
            </button>
        </div>
    </div>

    <div class='row'>
        <div class='col-xl-8 col-md-8 offset-xl-2 offset-md-2 col-12 mb-2'>
            <div id='tokenCard' class="card">
                <div class="card-body d-flex flex-column justify-content-between">
                    <h5>Upptaka: <b id='nameText'></b></h5>
                    <h5>Aldur: <b id='ageText'></b></h5>
                    <h5>Kyn: <b id='genderText'></b></h5>
                    <h5>Móðurmál: <b id='nativeLangText'></b></h5>
                    <h3 class='card-text' id='tokenText'></h3>
                    <p class='card-text mb-0'>

                    </p>
                </div>
            </div>
        </div>
    </div>

    <div class='row'>
        <div class='col-xl-8 col-md-8 offset-xl-2 offset-md-2 col-12 mb-2'>
            <div id='recordingCard' class='card'>
                <div class='card-body'>
                    <div id="waveform"></div>
                </div>
                <ul class='list-group list-group-flush'>
                    <li class='list-group-item'>
                        <span id='listenAlertSpan' class='text-warning' style='font-size:12px; line-height:30px;'>
                            <i class='fa fa-volume-up mr-1'></i>
                            {% if is_secondary %}
                                Hlustið til að greina. Afklippið fyrir nýja klippingu.
                            {% else %}
                                Hlustið og klippið til að greina
                            {% endif %}
                        </span>
                        <div class='btn-group float-right' role='group'>
                            {# <button id='cut' type='button' class='btn btn-secondary btn-sm'>
                                <span id='cutButtonText'>Klippa</span>
                                <i id='cutButtonIcon' class='fa fa-cut text-success ml-1'></i>
                            </button> #}
                            <button id='play' type='button' class='btn btn-secondary btn-sm'>
                                <i id='playButtonIcon' class='fa fa-play'></i>
                            </button>
                            <button id='download' class="btn btn-secondary btn-sm"><i class='fa fa-download'></i></button>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <form id="verificationForm" action="{{url_for('verification.create_verification')}}" method="POST">
        {{ form.recording }}
        {{ form.verified_by }}
        {{ form.num_verifies }}
        {{ form.cut }}
        {{ form.session}}
        {{ form.isPriority}}
        <div class="row mt-1">
            <div class="col-xl-8 col-md-8 offset-xl-2 offset-md-2 col-12">
                {{ form.quality }}
            </div>
        </div>
        <div class="row">
            <div class="col-xl-8 col-md-8 offset-xl-2 offset-md-2 col-12 mb-2">
                {{ form.comment(class="form-control", rows=2, placeholder='Athugasemd...') }}
            </div>
        </div>
        <div class="row">
            <div class="col-xl-8 col-md-8 offset-xl-2 offset-md-2 col-12">
                <button id="verify" class="btn btn-success btn-sm rounded-pill float-right mb-2">
                    <span class='font-weight-bold mr-1 ml-1'>Staðfesta</span>
                    <i class='fa fa-check mr-1'></i>
                </button>
            </div>
        </div>
    </form>
    <div class='row'>
        <div class="col-xl-8 col-md-8 offset-xl-2 offset-md-2 col-12">
            <form id='deleteVerificationForm' action="{{url_for('verification.delete_verification')}}">
                {{ delete_form.verification_id }}
                <button type='button' id='deleteVerification' class='btn btn-danger btn-sm float-right rounded-pill'>
                    <span class='ml-1 font-weight-bold'>Eyða greiningu</span>
                    <i class='fa fa-trash ml-1 mr-1'></i>
                </button>
            </form>
        </div>
    </div>
    <div class='collapse mt-3' id='infoCollapse'>
        <div class='row'>
            <div class="col-xl-8 col-md-8 offset-xl-2 offset-md-2 col-12">
                <h4>Leiðbeiningar:</h4>
                <h5>Meginreglan</h5>
                <p>
                    Meginreglan er að það sem er lesið upp verður að stemma við textann sem birtist á skjánum. 
                    Það kemur fyrir að orð eru ekki lesin rétt eða bara ekki lesin yfirhöfuð, þegar slíkt gerist 
                    á að merkja upptökuna sem slæma.
                </p>
                <h5>Brothljóð</h5>
                <p>
                    Það kemur fyrir að upptaka heppnist illa og innihaldi svokallað brothljóð. Þegar slíkt hljóð 
                    yfirgnæfir talið að miklu leyti á að merkja upptökuna sem slæma.
                </p>
                <h5>Kliður/bakgrunnshljóð</h5>
                <p>
                    Við viljum að tækin okkar skilji okkur í þeim aðstæðum sem við erum í. Því er allt í lagi að 
                    það heyrist smá kliður eða bakgrunnshljóð, svo lengi sem það yfirgnæfir ekki þann sem les. 
                </p>
                <h5>Dæmi</h5>
                <p>Til að sjá dæmi um ofantalin atriði, vinsamlega skoðið hér inni á <a href='https://samromur.is/hlusta'>vef Samróms</a>.</p>
            </div>
        </div>
        <div class='row'>
            <div class="col-xl-8 col-md-8 offset-xl-2 offset-md-2 col-12">
                <h4>Flýtihnappar:</h4>
            </div>
        </div>
        <div class='row'>
            <div class="col-xl-4 col-md-4 offset-xl-2 offset-md-2 col-6">
                    <table class="table table-sm">
                        <tbody>
                            <tr>
                                <td>q</td>
                                <td>Síðasta upptaka</td>
                            </tr>
                            <tr>
                                <td>w</td>
                                <td>Spila upptöku</td>
                            </tr>
                            <tr>
                                <td>e</td>
                                <td>Næsta upptaka</td>
                            </tr>
                            <tr>
                                <td>Færsluhnappur (enter)</td>
                                <td>Staðfesta</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-xl-4 col-md-4 col-3">
                    <table class="table table-sm">
                        <tbody>
                            <tr>
                                <td>d</td>
                                <td>Slæm</td>
                            </tr>
                            <tr>
                                <td>g</td>
                                <td>Góð</td>
                            </tr>
                        </tbody>
                    </table>
                </p>
            </div>
        </div>
    </div>
{% endblock %}
{% block modals %}
    {{super() }}
    <div class="modal fade" id='continueModal' tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Greining lotu er lokið.</h5>
                    <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Veljið forsíðu til að hætta greiningu eða halda áfram til að fara í næstu lotu</p>
                </div>
                <div class="modal-footer">
                    <a href="{{url_for('verification.verify_index')}}" class='btn btn-secondary text-success'>
                        Fara heim
                        {{macros.btn_icon('home', 'l')}}
                    </a>
                    <a href="{{url_for('verification.verify_queue')}}" class='btn btn-success'>
                        Fara í næstu
                        {{macros.btn_icon('arrow-right', 'l')}}
                    </a>
                </div>
                </div>
            </div>
        </div>
    </div>
    {% with category=config.ECONOMY.achievements.verification, level=current_user.progression.verification_level, progress=0, type='verification', color='success' %}
        {% include 'achievement_modal.jinja' %}
    {% endwith %}
    {% with category=config.ECONOMY.achievements.spy, level=current_user.progression.spy_level, progress=0, type='spy', color='warning' %}
        {% include 'achievement_modal.jinja' %}
    {% endwith %}
    {% with category=config.ECONOMY.achievements.streak, level=current_user.progression.streak_level, progress=0, type='streak', color='danger' %}
        {% include 'achievement_modal.jinja' %}
    {% endwith %}

{% endblock %}
{% block scripts %}
    {{super()}}
    <script src='{{url_for("main.static", filename="js/error.js")}}'></script>
    <script src='{{url_for("recording.static", filename="js/surf.js")}}'></script>
    <script src='{{url_for("shop.static", filename="js/confetti.min.js")}}'></script>
    <script>
        let wavesurfer;

        var session = {{json_session}};
        var isSecondary = "{{is_secondary}}" === "True";
        var recordings = session.recordings;
        var originalRecordings = JSON.parse(JSON.stringify(recordings));
        var recIndex = 0;
        var numRecordings = recordings.length
        var regionsUpdated = false;
        var isPriority = "{{isPriority}}"

        // Added for Samrómur
        const nameText = document.querySelector("#nameText");
        const ageText = document.querySelector("#ageText");
        const genderText = document.querySelector("#genderText");
        const nativeLangText = document.querySelector("#nativeLangText");
        
        const tokenText = document.querySelector("#tokenText");
        const tokenIDSpan = document.querySelector("#tokenID");
        const tokenHref= document.querySelector("#tokenHref");
        const tokenfileIDSpan = document.querySelector("#tokenFileID");
        const progressBar = document.querySelector('#progressBar');
        const currentIndexSpan = document.querySelector('#currentIndexSpan');
        const hasSentSpan = document.querySelector('#hasSentSpan');
        const listenAlertSpan = document.querySelector('#listenAlertSpan');
        document.querySelector('#totalIndexSpan').innerHTML = numRecordings;

        //buttons
        const nextButton = document.querySelector('button#next');
        const prevButton = document.querySelector('button#prev');
        // const cutButton = document.querySelector('button#cut');
        const downloadButton = document.querySelector('button#download');
        const playButton = document.querySelector('button#play');
        const playButtonIcon = document.querySelector('#playButtonIcon');
        const restartButton = document.querySelector("button#restart");

        nextButton.addEventListener('click', nextAction);
        prevButton.addEventListener('click', prevAction);
        // cutButton.addEventListener('click', cutAction);
        downloadButton.addEventListener('click', downloadAction);
        playButton.addEventListener('click', playAction);
        restartButton.addEventListener('click', restartAction);

        let disableShortcuts = false;
        let disableEnterAction = false;

        const qualitySelectors = document.querySelectorAll("#quality input");
        const qualityLabels = document.querySelectorAll("#quality label");
        qualityLabels.forEach(function(checkbox) {
            checkbox.addEventListener('click', function(e) {
                e.preventDefault();
                let value = document.getElementById(e.target.htmlFor).value
                formAction(value);
            });
        });

        const commentField = document.querySelector("textarea#comment");
        commentField.addEventListener('focus', function() { disableShortcuts = true; });
        commentField.addEventListener('blur', function() { disableShortcuts = false; });
        const sendVerificationButton = document.querySelector("button#verify")
        sendVerificationButton.addEventListener('focus', function() { disableEnterAction = true; });
        sendVerificationButton.addEventListener('blur', function() { disableEnterAction = false; });
        sendVerificationButton.addEventListener('click', function(e) {
            e.preventDefault();
            postForm();
        });
        const deleteVerificationButton = document.querySelector('button#deleteVerification');
        deleteVerificationButton.addEventListener('click', function(e){
            e.preventDefault();
            postDeleteForm();
        })

        $(window).keyup(function (e) {
            if (disableShortcuts) return; // For example while inside text field

            if(e.key === "q" || e.keyCode === 37){ // arrow-left or "a"
                prevAction()
            }
            else if(e.key === "w"){
                playAction();
            }
            // else if(e.key === " "){
            //     cutAction();
            // }
            else if(recordings[recIndex].hasPlayed){
                if(e.keyCode === 39 || e.key === "e"){ // arrow-right or "e"
                    nextAction();
                } 
                /* else if(e.key === "a"){
                    formAction("low");
                } else if(e.key === "s"){
                    formAction("high");
                } */ 
                
                else if(e.key === "d"){
                    formAction("wrong");
                } 
                
                /* else if(e.key === "f"){
                    formAction("glitch");
                } else if(e.key === "v"){
                    formAction("glitch-outside");
                } */
                
                else if(e.key === "g"){
                    formAction("ok");
                } else if(e.key === "Enter" && !disableEnterAction) {
                    postForm();
                }
            }
        });

        function restartAction(){
            recordings[recIndex] = JSON.parse(JSON.stringify(originalRecordings[recIndex]));
            updateUI();
        }

        function nextAction(){
            // Increment the sentence index and update the UI
            if(recordings[recIndex].hasSent){
                if(recIndex < numRecordings - 1 && recordings[recIndex]){
                    if(wavesurfer){wavesurfer.destroy()};
                    recIndex += 1; updateUI();
                } else {
                    // we have reached the end
                    $('#continueModal').modal('show');
                    updateUI();
                }
            }
        }

        function prevAction(){
            // Decrement the sentence index and update the UI
            if(recIndex > 0){
                if(wavesurfer){wavesurfer.destroy()};
                recIndex -= 1; updateUI();
            }
        }

        function cutAction(){
            console.log(wavesurfer.regions.list)
            if(Object.keys(wavesurfer.regions.list).length > 0){
                if(regionsUpdated){
                    const playList = getTrimPlayList();
                    recordings[recIndex].cut = playList;
                    recordings[recIndex].hasTrim = true;
                    updateFormUI();
                    updateProgressUI();
                    regionsUpdated = false;
                }
                else{
                    delete recordings[recIndex].cut;
                    recordings[recIndex].hasTrim = false;
                    updateFormUI();
                    updateProgressUI();
                    wavesurfer.clearRegions();
                }
            }
            setCutUI();
        }

        function downloadAction(){
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = recordings[recIndex].rec_url;
            a.download = recordings[recIndex].rec_fname;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function setCutUI(newRegion=false){
            console.log('Cut is disabled.')
            /*if(newRegion || (wavesurfer && areRegions())){
                cutButton.disabled = false;
                if(newRegion){
                    cutButtonIcon.classList.remove('text-danger');
                    cutButtonIcon.classList.add('text-success');
                    cutButtonText.innerHTML = 'Klippa';
                } else{
                    cutButtonIcon.classList.remove('text-success');
                    cutButtonIcon.classList.add('text-danger');
                    cutButtonText.innerHTML = 'Afklippa';
                }
            } else{
                cutButtonIcon.classList.remove('text-danger');
                cutButtonIcon.classList.add('text-success');
                cutButtonText.innerHTML = 'Klippa';
                cutButton.disabled = true;
            }*/
        }

        function formAction(value) {
            // Check/uncheck form fields
            if (value == "ok") {
                // If 'ok' deselect others
                document.querySelectorAll("#quality input:not([value=ok])").forEach(
                    function(input){ input.checked = false; }
                );
            } else {
                // Make sure 'ok' is not selected
                document.querySelector("#quality input[value=ok]").checked = false;
            }

            let field = document.querySelector("#quality input[value=" + value + "]");
            field.checked = !field.checked;
        }

        function cleanForm() {
            commentField.value = "";
            qualitySelectors.forEach(function(input){ input.checked = false; });
            document.querySelector("input[name=recording]").value = "";
        }

        function postForm() {
            var xhr = new XMLHttpRequest();
            xhr.onload = function(e) {
                if(this.readyState === XMLHttpRequest.DONE) {
                    if(xhr.status == '200'){
                        // if we finish we go straight to the next recording
                        var response = JSON.parse(xhr.responseText);
                        recordings[recIndex].verificationId = response.id;
                        recordings[recIndex].verdict = {};
                        document.querySelectorAll("#quality input").forEach(
                            function(input){
                                recordings[recIndex].verdict[input.value] = input.checked;
                            }
                        )
                        updateExperienceVal(response.experience);
                        updateCoinVal(response.coins);

                        if(response.achievements.length > 0){
                            for(var i=0; i<response.achievements.length; i++){
                                $("#"+response.achievements[i]+"AchievementModal").modal('show');
                                $("#"+response.achievements[i]+"AchievementModal").on('hide.bs.modal', function(e){
                                    confetti.stop();
                                });
                            }
                            confetti.maxCount = 150;
                            confetti.start();
                            $('#confetti-canvas').css('z-index', 900);
                            var audio = new Audio('{{url_for("shop.static", filename="audio/achievement.wav")}}');
                            audio.volume = 0.7;
                            audio.play();

                        }
                        recordings[recIndex].verdictComment = commentField.value;
                        recordings[recIndex].hasSent = true;
                        nextAction();
                    } else{
                        promptError("Villa koma upp:", xhr.responseText, "");
                    }
                }
            };

            let form = document.querySelector("#verificationForm");
            form.querySelector("input[name=recording]").value = recordings[recIndex].rec_id;
            form.querySelector("input[name=verified_by]").value = {{current_user.id}};
            form.querySelector("input[name=num_verifies]").value = recordings[recIndex].rec_num_verifies;
            form.querySelector("input[name=cut]").value = generateCutFormInput();
            form.querySelector("input[name=session]").value = session.id;
            form.querySelector("input[name=isPriority]").value = isPriority;
            let formData = new FormData(form);
            xhr.open("POST", form.action, true);
            xhr.send(formData);

            function generateCutFormInput(){
                let input = [];
                if(recordings[recIndex].cut){
                    for(var i=0; i<recordings[recIndex].cut.length; i++){
                        input.push({
                            'start': recordings[recIndex].cut[i].start,
                            'end': recordings[recIndex].cut[i].end})
                    }
                    
                }
                return JSON.stringify(input)
            }
        }

        function postDeleteForm() {
            var xhr = new XMLHttpRequest();
            xhr.onload = function(e) {
                if(this.readyState === XMLHttpRequest.DONE) {
                    if(xhr.status == '200'){
                        // if we finish we go straight to the next recording
                        var response = JSON.parse(xhr.responseText);
                        console.log(response);
                        updateExperienceVal(response.experience);
                        updateCoinVal(response.coins);
                        recordings[recIndex] = JSON.parse(JSON.stringify(originalRecordings[recIndex]));
                        updateUI();
                    } else{
                        promptError("Villa koma upp:", xhr.responseText, "");
                    }
                }
            };

            let form = document.querySelector("#deleteVerificationForm");
            form.querySelector("input[name=verification_id]").value = recordings[recIndex].verificationId;
            let formData = new FormData(form);
            xhr.open("POST", form.action, true);
            xhr.send(formData);

        }

        async function playAction(){
            // Play the recording for the sentence at the current index.

            if(arePlaying()){
                wavesurfer.pause();
            } else{
                if(Object.keys(wavesurfer.regions.list).length > 0){
                    playSelections();
                } else{
                    wavesurfer.play();
                }
            }
        }

        playSelections = () => {
            const playlist = getTrimPlayList();
            wavesurfer.on('pause', () => {
              if(playlist.length > 1){
                playlist.shift()
                wavesurfer.play(playlist[0].start, playlist[0].end)
              } else if (playlist.length === 1) {
                wavesurfer.stop()
                recordings[recIndex].hasPlayed = true;
                updateFormUI();
                updateProgressUI();
              }
               })
               wavesurfer.play(playlist[0].start, playlist[0].end);
        }

        function updateFormUI(){
            if(recordings[recIndex].hasSent){
                $("#verificationForm").css('display', 'block');
                $("#verificationForm :input").prop("disabled", true);
                commentField.value = recordings[recIndex].verdictComment;
                qualitySelectors.forEach(function(checkbox) {
                    checkbox.checked = recordings[recIndex].verdict[checkbox.value] || false;
                });
            } else if(recordings[recIndex].hasPlayed){
                $("#verificationForm").css('display', 'block');
                $("#verificationForm :input").prop("disabled", false);
            } else{
                $("#verificationForm").css('display', 'none');
                $("#verificationForm :input").prop("disabled", true);
            }
        }

        function updateTokenUI(){
            tokenText.innerHTML = recordings[recIndex]['text'];
            nameText.innerHTML = recordings[recIndex]['rec_fname'].substring(0, 14);
            ageText.innerHTML = recordings[recIndex]['speaker_age'];
            genderText.innerHTML = recordings[recIndex]['speaker_gender'];;
            nativeLangText.innerHTML = recordings[recIndex]['speaker_natLang'];;
            console.log(recordings[recIndex]);
        }

        function updateCoinVal(value){
            if(value !== document.querySelector('#coinValue').innerHTML){
                document.querySelector('#coinValue').innerHTML = value;
                document.querySelector('#coinValue').classList.add('color-change');
                setTimeout(function() {
                    document.querySelector('#coinValue').classList.remove('color-change')
                }, 3000);
            }
        }

        function updateExperienceVal(value){
            if(value !== document.querySelector('#experienceValue').innerHTML){
                document.querySelector('#experienceValue').innerHTML = value;
                document.querySelector('#experienceValue').classList.add('color-change');
                setTimeout(function() {
                    document.querySelector('#experienceValue').classList.remove('color-change')
                }, 3000);
            }
        }

        function updateProgressUI(){
            var ratio = (recIndex + 1) / numRecordings * 100;
            progressBar.style.width = `${ratio.toString()}%`;
            currentIndexSpan.innerHTML = recIndex + 1;
            if(recordings[recIndex].hasSent){
                deleteVerificationButton.disabled = false;
                deleteVerificationForm.style.display = 'block';
                sendVerificationButton.disabled = true;
                sendVerificationButton.style.display = 'none';
                hasSentSpan.style.display = 'inline-block';
                restartButton.disabled = true;
            } else{
                deleteVerificationButton.disabled = true;
                deleteVerificationForm.style.display = 'none';
                sendVerificationButton.disabled = false;
                sendVerificationButton.style.display = 'block';
                hasSentSpan.style.display = 'none';
                restartButton.disabled = false;
            }
            if(recordings[recIndex].hasPlayed && recordings[recIndex].hasTrim){
                listenAlertSpan.style.display = 'none';
            } else{
                listenAlertSpan.style.display = 'inline-block';
            }
        }

        function updateRecordingUI(){
            if(typeof wavesurfer === 'object'){
                wavesurfer.destroy();
            }
            regionsUpdated = false;
            wavesurfer = createRecordWaveSurfer('#waveform', false, playButtonIcon);
            wavesurfer.on('finish', function(){
                recordings[recIndex].hasPlayed = true;
                updateFormUI();
                updateProgressUI();
            });

            wavesurfer.load(recordings[recIndex].rec_url);

            if(recordings[recIndex].cut){
                for(var i=0; i<recordings[recIndex].cut.length; i++){
                    wavesurfer.addRegion(recordings[recIndex].cut[i]);
                }
            } else if(isSecondary && recordings[recIndex].verification){
                // load the trim from the previous verifier
                for(var i=0; i<recordings[recIndex].verification.trims.length; i++){
                    wavesurfer.addRegion({...recordings[recIndex].verification.trims[i],
                        dragSelection: {slop: 5},
                        color: "rgba(243, 156, 18, 0.1)"});
                }
            }

            wavesurfer.on('region-created', function(region){
                regionsUpdated = true;
                setCutUI(newRegion=true);
            })
            wavesurfer.on('region-update-end', function(region){
                if(!regionsOverlap()){
                    regionsUpdated = true;
                    setCutUI(newRegion=true);
                } else{
                    // delete this region
                    region.remove();
                }
            })
            wavesurfer.on('region-removed', function(){
                regionsUpdated = true;
                setCutUI(newRegion=true);
            })
        }

        function updateUI(){
            updateTokenUI();
            updateProgressUI();
            updateRecordingUI();

            cleanForm();
            updateFormUI();
            setCutUI();
        }

        updateUI();

        function arePlaying(){
            if(wavesurfer){
                return wavesurfer.isPlaying();
            }
            return false;
        }

        function areRegions(){
            return typeof wavesurfer === 'object' && Object.keys(wavesurfer.regions.list).length > 0;
        }

        function getTrimPlayList(){
            const playlist = Object.values(wavesurfer.regions.list)
            playlist.sort((a, b) => (a.start > b.start) ? 1 : -1)
            return playlist;
        }

        function regionsOverlap(){
            //check if any current regions overlap
            const regions = getTrimPlayList();
            for(var i=0; i<regions.length-1; i++){
                if(regions[i].end > regions[i+1].start){
                    return true;
                }
            }
            return false;
        }

    </script>
{% endblock %}
